services:
  catalogdb:
    image: ankane/pgvector:latest
    container_name: catalogdb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: catalogdb
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - ./init-identity-db.sh:/docker-entrypoint-initdb.d/init-identity-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d catalogdb"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - eShopNetwork

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - eShopNetwork

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eShopNetwork

  catalog-api:
    image: catalog-api
    build:
      context: .
      dockerfile: src/Catalog.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://*:80"
      ConnectionStrings__CatalogDB: "Server=catalogdb;Port=5432;Database=catalogdb;User Id=postgres;Password=password;"
      ConnectionStrings__EventBus: "amqp://guest:guest@rabbitmq:5672"
    depends_on:
      catalogdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "5000:80"
    entrypoint: ["/wait-for-it.sh", "rabbitmq:5672", "--", "dotnet", "Catalog.API.dll"]
    networks:
      - eShopNetwork
    restart: on-failure

networks:
  eShopNetwork:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  rabbitmq_data: